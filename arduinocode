#include <SPI.h>
#include <MFRC522.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define RST_PIN 9
#define SS_PIN 10

MFRC522 mfrc522(SS_PIN, RST_PIN);  // Create MFRC522 instance
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Set the LCD address to 0x27 for a 16x2 display

// Registered card UID (replace with your card's UID)
byte registeredCard[] = {0x33, 0x51, 0xD1, 0x0C};  // Replace with your tag's UID

unsigned long otpStartTime = 0;  // Tracks when the OTP was generated
bool displayingOTP = false;      // Flag to check if OTP is being displayed
unsigned long currentOTP = 0;    // Store the generated OTP (use unsigned long)

void setup() {
  Serial.begin(9600);  // Initialize serial communications
  SPI.begin();         // Init SPI bus
  mfrc522.PCD_Init();  // Init MFRC522
  lcd.init();          // Initialize the LCD with 16 columns and 2 rows
  lcd.backlight();     // Turn on the backlight
  lcd.print("Scan your card");
  Serial.println("System initialized. Ready to scan cards.");
}

void loop() {
  // Look for new cards
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    // Check if 30 seconds have passed since OTP generation
    if (displayingOTP && (millis() - otpStartTime >= 30000)) {
      lcd.clear();
      lcd.print("Scan your card");
      displayingOTP = false;
    }
    return;
  }

  // Check if the card is registered
  if (isCardRegistered(mfrc522.uid.uidByte, mfrc522.uid.size)) {
    lcd.clear();
    lcd.print("Generating OTP...");
    delay(1000);

    // Generate a 6-digit OTP (always positive)
    currentOTP = random(100000, 1000000);  // Generates a number between 100000 and 999999

    // Format the OTP as a 6-digit string with leading zeros
    char otpStr[7]; // Buffer to hold the OTP as a string
    sprintf(otpStr, "%06lu", currentOTP); // Format as a 6-digit number with leading zeros

    // Display the formatted OTP on the LCD
    lcd.clear();
    lcd.print("OTP: ");
    lcd.print(otpStr);

    // Start the 30-second timer
    otpStartTime = millis();
    displayingOTP = true;

    // Send OTP to Node.js via Serial
    Serial.print("SEND_OTP:");
    Serial.println(otpStr);
  } else {
    lcd.clear();
    lcd.print("Card Not Registered");
    delay(2000);
    lcd.clear();
    lcd.print("Scan your card");
  }

  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
}

bool isCardRegistered(byte *uid, byte uidSize) {
  for (byte i = 0; i < uidSize; i++) {
    if (uid[i] != registeredCard[i]) {
      return false;
    }
  }
  return true;
}
